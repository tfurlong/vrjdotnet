# VRJ.NET is (C) Copyright 2004 by Patrick Hartling
# Distributed under the GNU Lesser General Public License 2.1.  (See
# accompanying file COPYING.txt or http://www.gnu.org/copyleft/lesser.txt)

# File:          $RCSfile$
# Date modified: $Date$
# Version:       $Revision$

exec_prefix=	@exec_prefix@
includedir=	@includedir@/vrjnet_util
libdir=		@libdir@
prefix=		@prefix@
scriptdir=	$(top_srcdir)/release/scripts
topdir=		@topdir@
top_srcdir=	@top_srcdir@

srcdir=		@srcdir@

MKINSTALLDIRS=	$(scriptdir)/mkinstalldirs

AR=		@AR@ $(ARFLAGS)
AR_NAME_FLAG=	@AR_NAME_FLAG@
ARFLAGS=	@ARFLAGS@
CXX=		@CXX@
DEFS=		@DEFS@

ifeq (@OS_TYPE@, Win32)
   ARFLAGS+=	$(LDFLAGS)
   CXXFLAGS=	$(shell vpr-config --includes) /Zm800 /GX /GR /Op	\
		/Zc:wchar_t,forScope
   CXXFLAGS_DBG=/Z7 /Od /Ob0 /MDd /D_DEBUG
   CXXFLAGS_OPT=/Ogity /O2 /Gs /Ob2 /MD /D_OPT
   LDFLAGS_DBG=	/DEBUG
   LDFLAGS_OPT=	/RELEASE
   LIBEXT_DBG=	_d
   LIBEXT_OPT=	
else
   CXXFLAGS=	$(shell vpr-config --cxxflags)
   CXXFLAGS_DBG=-D_DEBUG -g
   CXXFLAGS_OPT=-D_OPT -O2
   LDFLAGS_DBG=	-g
   LDFLAGS_OPT=	-O2
   LIBEXT_DBG=	
   LIBEXT_OPT=	
endif

CXXFLAGS+=	@CLI_CFLAGS@ -I$(srcdir)
OBJDIR_DBG=	obj.dbg
OBJDIR_OPT=	obj.opt

VPR_LIBS=	@VPR_LIBS_CC@
VPR_EXTRA_LIBS=	@VPR_EXTRA_LIBS_CC@

ifeq ($(BUILD_TYPE), DEBUG)
   CXXFLAGS+=	$(CXXFLAGS_DBG)
   LDFLAGS+=	$(LDFLAGS_DBG)
   LIBEXT=	$(LIBEXT_DBG)
   OBJDIR=	$(OBJDIR_DBG)
else
   CXXFLAGS+=	$(CXXFLAGS_OPT)
   LDFLAGS+=	$(LDFLAGS_OPT)
   LIBEXT=	$(LIBEXT_OPT)
   OBJDIR=	$(OBJDIR_OPT)
endif

ARCEXT=		@STATICLIB_EXT@
DLLEXT=		@DYNAMICLIB_EXT@
OBJEXT=		@OBJEXT@
OBJ_NAME_FLAG=	@OBJ_NAME_FLAG@

# Source/object list.
SRCS=		CliGuard.cpp
OBJS=		$(addprefix $(OBJDIR)/, $(SRCS:.cpp=.$(OBJEXT)))

LIB_PREFIX=	@LIB_PREFIX@

# Base library list.
UTIL_LIB=	$(LIB_PREFIX)vrjnet_util$(LIBEXT)

# Static (archive) library list.
UTIL_ARC=	$(UTIL_LIB).$(ARCEXT)

LIBS=		$(UTIL_ARC)

vpath %.cpp $(srcdir)

# -----------------------------------------------------------------------------
# Targets
# -----------------------------------------------------------------------------

default: optim

all: optim debug

beforebuild:
	@$(MKINSTALLDIRS) $(OBJDIR)

optim:
	$(MAKE) BUILD_TYPE=OPTIMIZED beforebuild
	$(MAKE) BUILD_TYPE=OPTIMIZED libs
	$(MAKE) BUILD_TYPE=OPTIMIZED prefix="$(topdir)"			\
          exec_prefix="$(topdir)" install

debug:
	$(MAKE) BUILD_TYPE=DEBUG beforebuild
	$(MAKE) BUILD_TYPE=DEBUG libs
	$(MAKE) BUILD_TYPE=DEBUG prefix="$(topdir)"			\
          exec_prefix="$(topdir)" install

libs: $(LIBS)

install:
	$(MKINSTALLDIRS) $(includedir)
	cp -p $(srcdir)/*.h $(includedir)
	$(MKINSTALLDIRS) $(libdir)
	for lib in $(LIBS) ; do				\
            cp -p $$lib $(libdir) ;			\
          done

$(OBJDIR)/%.$(OBJEXT): %.cpp
	$(CXX) $(DEFS) $(CXXFLAGS) $(OBJ_NAME_FLAG) -c $<

$(UTIL_ARC): $(OBJS)
	$(AR) $(AR_NAME_FLAG)$@ $(OBJS)

cleandepend:
	rm -f $(DEPEND_FILES)

clean:
	rm -rf $(OBJDIR_DBG) $(OBJDIR_OPT)
	rm -f $(DEPEND_FILES)

clobber:
	$(MAKE) clean
	rm -f $(LIBS)

# -----------------------------------------------------------------------------
# Dependency generation.
# -----------------------------------------------------------------------------
BASIC_OBJECTS=	$(SRCS:.cpp=.$(OBJEXT))
MKDEP_C=	$(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) -M
MKDEP_CXX=	$(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) -M

include $(top_srcdir)/Doozer++/mk/dpp.dep.mk
-include $(DEPEND_FILES)
